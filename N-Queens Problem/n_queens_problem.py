# -*- coding: utf-8 -*-
"""N-Queens-Problem.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Q9pkZeIYhONOOAVZzOYlFFYihU6AA3jb
"""

class N_Queens():
  def __init__(self,n):
    self.tab = [[0 for i in range(n)]for j in range(n)]
    self.n = n
  
  def possible(self,row,column):
    for i in range(self.n):
      if self.tab[i][column] == 'x':
        return False
      if self.tab[row][i] == 'x':
        return False
    if not(self.__recursao__(row,column,'++')):
      return False
    if not(self.__recursao__(row,column,'+-')):
      return False
    if not(self.__recursao__(row,column,'-+')):
      return False
    if not(self.__recursao__(row,column,'--')):
      return False
    return True
  
  def __recursao__(self,row,column,dir):
    if row < 0 or column < 0 or row == self.n or column == self.n:
      return True
    if self.tab[row][column] == 'x':
      return False
    if dir == '++':
      if(self.__recursao__(row+1,column+1,'++')):
        return True
      else:
        return False
    
    if dir == '+-':
      if(self.__recursao__(row+1,column-1,'+-')):
        return True
      else:
        return False
    
    if dir == '-+':
      if(self.__recursao__(row-1,column+1,'-+')):
        return True
      else:
        return False
    
    if dir == '--':
     if(self.__recursao__(row-1,column-1,'--')):
       return True
     else:
       return False

  def solve(self,column):
    if column == self.n:
      return True   

    for i in range(self.n):
      if self.possible(i,column):
        self.tab[i][column] = 'x'
        if not(self.solve(column+1)):
          self.tab[i][column] = 0
        else:
          return True       
    return False


  def get_tab(self):
    for i in range(self.n):
      for j in range(self.n):
        print(self.tab[i][j],end = ' ')
      print()

'''Todas as soluções

class N_Queens():
  def __init__(self,n):
    self.tab = [[0 for i in range(n)]for j in range(n)]
    self.n = n
    self.quantidade = 0
  
  def possible(self,row,column):
    for i in range(self.n):
      if self.tab[i][column] == 'x':
        return False
      if self.tab[row][i] == 'x':
        return False
    if not(self.__recursao__(row,column,'++')):
      return False
    if not(self.__recursao__(row,column,'+-')):
      return False
    if not(self.__recursao__(row,column,'-+')):
      return False
    if not(self.__recursao__(row,column,'--')):
      return False
    return True
  
  def __recursao__(self,row,column,dir):
    if row < 0 or column < 0 or row == self.n or column == self.n:
      return True
    if self.tab[row][column] == 'x':
      return False
    if dir == '++':
      if(self.__recursao__(row+1,column+1,'++')):
        return True
      else:
        return False
    
    if dir == '+-':
      if(self.__recursao__(row+1,column-1,'+-')):
        return True
      else:
        return False
    
    if dir == '-+':
      if(self.__recursao__(row-1,column+1,'-+')):
        return True
      else:
        return False
    
    if dir == '--':
     if(self.__recursao__(row-1,column-1,'--')):
       return True
     else:
       return False

  def solve(self,column):
    if column == self.n:
      self.get_tab()
      print('--'*self.n)
      return self.quantidade + 1  

    for i in range(self.n):
      if self.possible(i,column):
        self.tab[i][column] = 'x'
        self.quantidade = self.solve(column+1)
        self.tab[i][column] = 0       
    return self.quantidade


  def get_tab(self):
    for i in range(self.n):
      for j in range(self.n):
        print(self.tab[i][j],end = ' ')
      print()

queen = N_Queens(8)

queen.get_tab()
print(' ')
queen.solve(0)

'''

queen = N_Queens(8)

queen.get_tab()
print(' ')
queen.solve(0)
queen.get_tab()