# -*- coding: utf-8 -*-
"""sudokuSolver.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Q9pkZeIYhONOOAVZzOYlFFYihU6AA3jb
"""

import numpy as np

class Sudoku:
  def __init__(self):
    self.matrix = [[0, 0, 5, 3, 0, 0, 0, 0, 0],
                   [8, 0, 0, 0, 0, 0, 0, 2, 0], 
                   [0, 7, 0, 0, 1, 0, 5, 0, 0], 
                   [4, 0, 0, 0, 0, 5, 3, 0, 0], 
                   [0, 1, 0, 0, 7, 0, 0, 0, 6], 
                   [0, 0, 3, 2, 0, 0, 0, 8, 0], 
                   [0, 6, 0, 5, 0, 0, 0, 0, 9], 
                   [0, 0, 4, 0, 0, 0, 0, 3, 0], 
                   [0, 0, 0, 0, 0, 9, 7, 0, 0]]


  def build_sudoku(self):
    self.matrix = [[0 for i in range(9)]for j in range(9)]
    matrix = []
    for i in range(9):
      aux = input("Digite a linha: ").split()
      matrix.append(aux)
  
  def get_Sudoku(self):
    for i in range(9):
      for j in range(9):
        print(self.matrix[i][j],end=' ')
      print()
  
  def possible(self,row,column,number):
    for i in range(9):
      if self.matrix[i][column] == number:
        return False 
      
    for i in range(9):
      if self.matrix[row][i] == number:
        return False

    x0 = (row//3)*3
    y0 = (column//3)*3

    for i in range(3):
      for j in range(3):
        if self.matrix[x0+i][y0+j] == number:
          return False
    
    return True
  

  def solve(self):
    for i in range(9):
      for j in range(9):
         
        if self.matrix[i][j] == 0:
          for k in range(1,10):  
            if self.possible(i,j,k):
              
              self.matrix[i][j] = k
              aux = self.solve()
              self.matrix[i][j] = 0
          return
    print()
    self.get_Sudoku()


    return True
'''
 
  def solve(self):
    aux = False 
    for i in range(9):
      for j in range(9):
        if self.matrix[i][j] == 0:
          for k in range(1,10):
             
            if self.possible(i,j,k):
              self.matrix[i][j] = k
              aux = self.solve()
          if not(aux):
            self.matrix[i][j] = 0
            return False

    return True
'''

sud = Sudoku()
sud.get_Sudoku()
sud.solve()
print()
'''
sud.get_Sudoku()
'''