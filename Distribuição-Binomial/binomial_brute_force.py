# -*- coding: utf-8 -*-
"""Binomial-Brute-Force

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19w-JFlroGTr3lr_HizLvTReejOtJ_P1f
"""

import math
from decimal import Decimal
from matplotlib import pyplot as plt

class Binomial():
  def __init__(self):
    temp = 3
    while temp != 0:
      print('O que deseja fazer? \n1- Criar distribuição \n2- Plotar gráfico \n0- sair')
      temp = int(input())
      if temp == 1:
        self.callDist()
      if temp == 2:
        self.plotGraph()

  def pMissing(self):
    self.probList = []
    self.xAxis = []
    self.p = self.x/self.n
    p = Decimal(0)
    while p<=1:
      temp = Decimal(math.factorial(self.n)/(math.factorial(self.x)*math.factorial(self.n-self.x)))*(p**self.x)*((1-p)**(self.n-self.x))
      self.xAxis.append(p)
      self.probList.append(temp)
      p = Decimal(p+Decimal(0.001))
    maxIndex = 0
    for i in range(len(self.probList)):
      if self.probList[i] > self.probList[maxIndex]:
        maxIndex = i
    self.maxIndex = maxIndex


  def xMissing(self):
    self.probList = []
    self.xAxis = []
    self.ex = []
    self.vx = []

    for x in range(self.n+1):
      temp = Decimal(Decimal(math.factorial(self.n))/Decimal((math.factorial(x)*math.factorial(self.n-x))))*(self.p**x)*((1-self.p)**(self.n-x))
      temp1 = temp*Decimal(x)
      self.ex.append(temp1)
      self.vx.append(temp*(Decimal(x)-(self.n*self.p))**2)
      self.xAxis.append(x)
      self.probList.append(temp)
    for x in range(self.n+1):
      self.vx.append(temp*((Decimal(x)-sum(self.ex))**2))
    
    maxIndex = 0
    for i in range(len(self.probList)):
      if self.probList[i] > self.probList[maxIndex]:
        maxIndex = i
    self.maxIndex = maxIndex
    
  
  def callDist(self):
    print("Qual valor está faltando?")
    print("1- p \n2- x")
    self.interface = int(input())
    
    if self.interface == 1:
      self.x = Decimal(input("Digite x: "))
      self.n = int(input("digite n: "))
      self.pMissing()
      
    elif self.interface == 2:
      self.p = Decimal(input("Digite p: "))
      self.n = int(input("digite n: "))
      self.xMissing()
      
    else:
      raise Exception("Opção inválida")
  
  def intervalo(self,soma): 
    mIndex = self.maxIndex
    right = mIndex
    left = mIndex
    sTemp = self.probList[self.maxIndex]
    soma = Decimal(soma)
    while sTemp < soma:
      if right+1 < len(self.probList):
        right +=1
        sTemp = sTemp + self.probList[right]
        if sTemp >= soma:
          break
      if left-1 >= 0:
        left -=1
        sTemp = sTemp + self.probList[left]
    if self.interface == 2:
      print("Limite à esquerda:", left)
      print("Limite à direita:", right)
      print("Intervalo de confiaça", round(sTemp,2))

    if self.interface == 1:
      print("Limite à esquerda:", left/self.n)
      print("Limite à direita:", right/self.n)
      print("Intervalo de confiaça", round(sTemp,2))

  def plotGraph(self):
    
    if self.interface == 1:
      print("Valor esperado:",self.x/self.n)
      print("Probabilidade:",self.probList[self.maxIndex])
    if self.interface == 2:
      print("Valor esperado:",self.maxIndex)
      print("Probabilidade:",self.probList[self.maxIndex])
       
    plt.plot(self.xAxis,self.probList)
    plt.show()

    temp = input("Que intervalo de confiança deseja obter?(0-1): \n")
    if self.interface == 1:
      self.xMissing()
    self.intervalo(temp)




  

bin = Binomial()